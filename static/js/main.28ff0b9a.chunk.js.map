{"version":3,"sources":["Store/Actions/actionTypes.js","Store/Actions/exchangeActions.js","Components/Chart/ChartStyle.js","constants.js","Components/Chart/Chart.js","Components/Chart/ChartContainer.js","Components/CurrencyConverter/CurrencyConverterStyle.js","Components/CurrencyConverter/CurrencyConverter.js","Components/CurrencyConverter/CurrencyConverterContainer.js","Components/Card/CardStyle.js","Components/Card/Card.js","Components/Card/CardContainer.js","Components/Main/Main.js","LangProvider/langProvider.js","App.js","reportWebVitals.js","Store/Reducers/exchangeReducers.js","Store/Reducers/currencyChartReducer.js","Store/Reducers/rootReducer.js","Store/Sagas/exchangeSaga.js","Store/Sagas/rootSaga.js","Store/store.js","index.js"],"names":["FETCH_CURRENCY","PENDING_CURRENCY","GET_CURRENCY","FETCH_TIMESERIES","PENDING_TIMESERIES","GET_TIMESERIES","SET_TARGET_CURRENCY","SET_DATE_TIMESERIES","TOGGLE_CHART","fetchChartData","starDate","endDate","currencySelected","currencyTarget","type","StyledDatePicker","styled","p","StyledChart","div","DEFAULT_CURRENCY_VALUE","DEFAULT_STARTING_DATE","SPINNER_TYPE_BUBBLE","WHITE_GRAY_COLOR","BLACK_COLOR","WHITE_COLOR","MEDIA_QUERIES_TABLET","injectIntl","props","fetchTimeSerie","setChartTime","formatMessage","intl","useState","startingDate","setStartingDate","useEffect","ChartView","chartData","timeSeries","isLoading","color","height","width","scale","x","text","id","y","textAnchor","data","value","aria-label","onChange","e","target","ChartContainer","connect","state","dispatch","startTime","Chart","StyledForm","form","MainCurrencySection","article","StyledSelect","select","StyledResult","StyledToggleButton","button","fetchCurrency","asignTargetCurrency","toggleChart","fromCurrency","setFromCurrency","toCurrency","setToCurrency","amountCurrency","setAmountCurrency","currency","rates","htmlFor","Object","keys","map","i","selectFromCurrency","showChart","handleOnChangeToCurrency","selectToCurrency","className","min","valueAsNumber","onClick","showComparedCurrency","CurrencyConverterContainer","exchange","targetCurrency","CurrencyConverter","StyledCard","section","StyledChartContainer","Card","CardContainer","Main","currentBrowserLang","navigator","languages","language","userLanguage","locale","messages","spanishMsg","englishMsg","defaultLocale","defaultMessages","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","base","date","currencyInfo","payload","timeSerieNormalization","action","timeSerieRates","entries","forEach","key","push","Date","values","rootReducer","combineReducers","fetchExchangeData","mergerSaga","getCurrency","axios","get","params","getChartData","fromDate","toDate","symbols","start_date","end_date","put","call","response","console","log","getStartingDate","getToCurrency","getFromCurrency","storeStartingDate","toJSON","slice","all","takeLatest","rootSaga","fork","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28ff0b9a.chunk.js","sourcesContent":["export const FETCH_CURRENCY = 'FETCH_CURRENCY';\r\nexport const PENDING_CURRENCY = 'PENDING_CURRENCY';\r\nexport const GET_CURRENCY = 'GET_CURRENCY';\r\nexport const FETCH_TIMESERIES = 'FETCH_TIMESERIES';\r\nexport const PENDING_TIMESERIES = 'PENDING_TIMESERIES';\r\nexport const GET_TIMESERIES = 'GET_TIMESERIES';\r\nexport const SET_TARGET_CURRENCY = 'SET_TARGET_CURRENCY';\r\nexport const SET_DATE_TIMESERIES = 'SET_DATE_TIMESERIES';\r\nexport const TOGGLE_CHART = 'TOGGLE_CHART';\r\n","import {\r\n    GET_CURRENCY,\r\n    FETCH_CURRENCY,\r\n    PENDING_CURRENCY,\r\n    FETCH_TIMESERIES,\r\n    PENDING_TIMESERIES,\r\n    GET_TIMESERIES,\r\n    SET_TARGET_CURRENCY,\r\n    TOGGLE_CHART,\r\n    SET_DATE_TIMESERIES\r\n} from './actionTypes';\r\n\r\nexport const fetchCurrency = currencySelected => ({\r\n    type: FETCH_CURRENCY,\r\n    currencySelected\r\n});\r\n\r\nexport const pendingCurrency = () => ({\r\n    type: PENDING_CURRENCY\r\n});\r\n\r\nexport const getCurrencyData = exchange => ({\r\n    type: GET_CURRENCY,\r\n    exchange\r\n});\r\n\r\nexport const asignTargetCurrency = targetCurrency => ({\r\n    type: SET_TARGET_CURRENCY,\r\n    targetCurrency\r\n});\r\n\r\nexport const fetchChartData = (\r\n    starDate,\r\n    endDate,\r\n    currencySelected,\r\n    currencyTarget\r\n) => ({\r\n    type: FETCH_TIMESERIES,\r\n    starDate,\r\n    endDate,\r\n    currencySelected,\r\n    currencyTarget\r\n});\r\n\r\nexport const pendingChartData = () => ({\r\n    type: PENDING_TIMESERIES\r\n});\r\n\r\nexport const getTimeSeries = timeSeries => ({\r\n    type: GET_TIMESERIES,\r\n    timeSeries\r\n});\r\n\r\nexport const toggleChart = () => ({\r\n    type: TOGGLE_CHART\r\n});\r\n\r\nexport const setChartTime = startTime => ({\r\n    type: SET_DATE_TIMESERIES,\r\n    startTime\r\n});\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDatePicker = styled.p`\r\n    padding: 5px 0 10px;\r\n    text-align: center;\r\n`;\r\n\r\nexport const StyledChart = styled.div`\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    max-height: 500px;\r\n`;\r\n","export const DEFAULT_CURRENCY_VALUE = 'EUR';\r\nexport const DEFAULT_TARGET_VALUE = 'USD';\r\nexport const DEFAULT_CURRENCY_AMOUNT = 1;\r\nexport const DEFAULT_STARTING_DATE = '2021-01-01';\r\nexport const SPINNER_TYPE_BUBBLE = 'bubbles';\r\nexport const SPINNER_TYPE_SPOKES = 'spokes';\r\n\r\nexport const WHITE_GRAY_COLOR = '#808080';\r\nexport const BLACK_COLOR = '#000000';\r\nexport const WHITE_COLOR = '#ffffff';\r\nexport const LIGHT_GRAY_COLOR = '#cccccc';\r\nexport const GHOST_GRAY_COLOR = '#f8f8ff';\r\nexport const MEDIA_QUERIES_TABLET = '769px';\r\n","import React, { useEffect, useState } from 'react';\r\nimport { VictoryChart, VictoryLine, VictoryLabel } from 'victory';\r\nimport { StyledDatePicker, StyledChart } from './ChartStyle';\r\nimport ReactLoading from 'react-loading';\r\nimport {\r\n    WHITE_GRAY_COLOR,\r\n    SPINNER_TYPE_SPOKES,\r\n    DEFAULT_STARTING_DATE\r\n} from '../../constants';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\n\r\nconst Chart = props => {\r\n    const { fetchTimeSerie, setChartTime } = props;\r\n    const { formatMessage } = props.intl;\r\n\r\n    const [startingDate, setStartingDate] = useState(DEFAULT_STARTING_DATE);\r\n\r\n    useEffect(() => {\r\n        fetchTimeSerie();\r\n    }, [fetchTimeSerie]);\r\n\r\n    const ChartView = () => {\r\n        const {\r\n            chartData: { timeSeries, isLoading }\r\n        } = props;\r\n\r\n        return (\r\n            <StyledChart>\r\n                {isLoading ? (\r\n                    <ReactLoading\r\n                        type={SPINNER_TYPE_SPOKES}\r\n                        color={WHITE_GRAY_COLOR}\r\n                    />\r\n                ) : (\r\n                    <VictoryChart height={250} width={500} scale={{ x: 'time' }}>\r\n                        <VictoryLabel\r\n                            text={formatMessage({\r\n                                id: 'chart.title'\r\n                            })}\r\n                            x={225}\r\n                            y={30}\r\n                            textAnchor='middle'\r\n                        />\r\n                        <VictoryLine data={timeSeries} />\r\n                    </VictoryChart>\r\n                )}\r\n            </StyledChart>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <StyledDatePicker>\r\n                <FormattedMessage id='chart.datePickerText' />\r\n                <input\r\n                    value={startingDate}\r\n                    type='date'\r\n                    aria-label='chart-date-input'\r\n                    onChange={e => {\r\n                        setStartingDate(e.target.value);\r\n                        fetchTimeSerie(e.target.value);\r\n                        setChartTime(e.target.value);\r\n                    }}\r\n                />\r\n            </StyledDatePicker>\r\n            <ChartView />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default injectIntl(Chart);\r\n","import { connect } from 'react-redux';\r\nimport { fetchChartData, setChartTime } from '../../Store/Actions/exchangeActions';\r\nimport Chart from './Chart';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        chartData: state.chartData\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchTimeSerie: starDate => dispatch(fetchChartData(starDate)),\r\n        setChartTime: starDate => dispatch(setChartTime(starDate))\r\n    };\r\n};\r\n\r\nconst ChartContainer = connect(mapStateToProps, mapDispatchToProps)(Chart);\r\n\r\nexport default ChartContainer;\r\n","import styled from 'styled-components';\r\nimport {\r\n    MEDIA_QUERIES_TABLET,\r\n    WHITE_COLOR,\r\n    WHITE_GRAY_COLOR,\r\n    BLACK_COLOR,\r\n    LIGHT_GRAY_COLOR,\r\n    GHOST_GRAY_COLOR\r\n} from '../../constants';\r\n\r\nexport const StyledForm = styled.form`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    box-sizing: border-box;\r\n    flex-direction: column;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n    width: 100%;\r\n\r\n    @media only screen and (min-width: ${MEDIA_QUERIES_TABLET}) {\r\n        flex-direction: row;\r\n        align-items: baseline;\r\n    }\r\n`;\r\n\r\nexport const MainCurrencySection = styled.article`\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nexport const StyledSelect = styled.select`\r\n    width: 100%;\r\n    height: 35px;\r\n    background: ${WHITE_COLOR};\r\n    color: ${WHITE_GRAY_COLOR};\r\n    padding-left: 5px;\r\n    font-size: 14px;\r\n    border: none;\r\n    margin-left: 10px;\r\n    width: 300px;\r\n\r\n    option {\r\n        color: ${BLACK_COLOR};\r\n        background: ${WHITE_COLOR};\r\n        display: flex;\r\n        white-space: pre;\r\n        min-height: 20px;\r\n        padding: 0px 2px 1px;\r\n    }\r\n`;\r\n\r\nexport const StyledResult = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    text-align: center;\r\n    justify-content: space-evenly;\r\n    flex-direction: column;\r\n\r\n    @media only screen and (min-width: ${MEDIA_QUERIES_TABLET}) {\r\n        flex-direction: row;\r\n    }\r\n\r\n    .from-currency {\r\n        width: 40%;\r\n        font-size: 18px;\r\n        input {\r\n            -webkit-appearance: none;\r\n            -moz-appearance: textfield;\r\n            text-align: center;\r\n            margin-right: 5px;\r\n            padding: 5px 0 7px;\r\n            border: 1px solid transparent;\r\n            border-bottom-color: ${LIGHT_GRAY_COLOR};\r\n            transition: 0.4s;\r\n            font-size: 18px;\r\n\r\n            @media only screen and (min-width: ${MEDIA_QUERIES_TABLET}) {\r\n                text-align: right;\r\n            }\r\n        }\r\n        input:focus {\r\n            padding: 5px 1px 7px;\r\n            transition: 0.4s;\r\n        }\r\n    }\r\n\r\n    .to-currency {\r\n        display: flex;\r\n        justify-content: center;\r\n        height: 53px;\r\n        width: 40%;\r\n    }\r\n`;\r\n\r\nexport const StyledToggleButton = styled.button`\r\n    background-color: ${GHOST_GRAY_COLOR};\r\n    border: none;\r\n    padding: 15px 32px;\r\n    margin-top: 25px;\r\n`;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    DEFAULT_CURRENCY_VALUE,\r\n    DEFAULT_CURRENCY_AMOUNT,\r\n    WHITE_GRAY_COLOR,\r\n    SPINNER_TYPE_BUBBLE\r\n} from '../../constants';\r\nimport {\r\n    StyledForm,\r\n    StyledSelect,\r\n    StyledResult,\r\n    MainCurrencySection,\r\n    StyledToggleButton\r\n} from './CurrencyConverterStyle';\r\nimport ReactLoading from 'react-loading';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\n\r\nconst CurrencyConverter = props => {\r\n    const { fetchCurrency, asignTargetCurrency, fetchTimeSerie, toggleChart } =\r\n        props;\r\n    const [fromCurrency, setFromCurrency] = useState(DEFAULT_CURRENCY_VALUE);\r\n    const [toCurrency, setToCurrency] = useState('');\r\n    const [amountCurrency, setAmountCurrency] = useState(DEFAULT_CURRENCY_AMOUNT);\r\n\r\n    useEffect(() => {\r\n        fetchCurrency();\r\n    }, [fetchCurrency]);\r\n\r\n    const showComparedCurrency = () => {\r\n        const {\r\n            currency: { isLoading, rates, showChart },\r\n            intl: { formatMessage }\r\n        } = props;\r\n        return toCurrency ? (\r\n            <>\r\n                <StyledResult>\r\n                    <p className='from-currency'>\r\n                        <input\r\n                            type='number'\r\n                            min='1'\r\n                            value={amountCurrency}\r\n                            onChange={e =>\r\n                                setAmountCurrency(\r\n                                    e.target.valueAsNumber || DEFAULT_CURRENCY_AMOUNT\r\n                                )\r\n                            }\r\n                        />\r\n                        {fromCurrency}\r\n                    </p>\r\n                    <div className='text-currency'>=</div>\r\n                    <div className='to-currency'>\r\n                        {isLoading ? (\r\n                            <ReactLoading\r\n                                type={SPINNER_TYPE_BUBBLE}\r\n                                color={WHITE_GRAY_COLOR}\r\n                            />\r\n                        ) : (\r\n                            <p>\r\n                                {rates[toCurrency] * amountCurrency} {toCurrency}\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n                </StyledResult>\r\n                <StyledToggleButton onClick={() => toggleChart()}>\r\n                    {showChart\r\n                        ? formatMessage({ id: 'chart.closeButton' })\r\n                        : formatMessage({ id: 'chart.openButton' })}\r\n                </StyledToggleButton>\r\n            </>\r\n        ) : null;\r\n    };\r\n\r\n    const handleOnChangeFromCurrency = currencySelected => {\r\n        setFromCurrency(currencySelected);\r\n        fetchCurrency(currencySelected);\r\n    };\r\n\r\n    const selectFromCurrency = () => {\r\n        const {\r\n            currency: { rates, isLoading }\r\n        } = props;\r\n        if (isLoading)\r\n            return (\r\n                <ReactLoading type={SPINNER_TYPE_BUBBLE} color={WHITE_GRAY_COLOR} />\r\n            );\r\n        return (\r\n            <>\r\n                <label htmlFor='from-currency'>\r\n                    <FormattedMessage id='currencyConverter.fromText' />\r\n                </label>\r\n                <StyledSelect\r\n                    id='from-currency'\r\n                    value={fromCurrency}\r\n                    onChange={e => handleOnChangeFromCurrency(e.target.value)}\r\n                >\r\n                    {Object.keys(rates).map((value, i) => (\r\n                        <option key={i}>{value}</option>\r\n                    ))}\r\n                </StyledSelect>\r\n            </>\r\n        );\r\n    };\r\n\r\n    const handleOnChangeToCurrency = currencySelected => {\r\n        const {\r\n            currency: { showChart }\r\n        } = props;\r\n        setToCurrency(currencySelected);\r\n        asignTargetCurrency(currencySelected);\r\n        if (showChart) fetchTimeSerie();\r\n    };\r\n\r\n    const selectToCurrency = () => {\r\n        const {\r\n            currency: { rates, isLoading },\r\n            intl: { formatMessage }\r\n        } = props;\r\n        if (isLoading)\r\n            return (\r\n                <ReactLoading type={SPINNER_TYPE_BUBBLE} color={WHITE_GRAY_COLOR} />\r\n            );\r\n        return (\r\n            <>\r\n                <label htmlFor='to-currency'>\r\n                    <FormattedMessage id='currencyConverter.toText' />\r\n                </label>\r\n                <StyledSelect\r\n                    id='to-currency'\r\n                    value={toCurrency}\r\n                    onChange={e => handleOnChangeToCurrency(e.target.value)}\r\n                >\r\n                    <option value=''>\r\n                        {formatMessage({ id: 'currencyConverter.toSelectDefault' })}\r\n                    </option>\r\n                    {Object.keys(rates).map((value, i) => (\r\n                        <option key={i}>{value}</option>\r\n                    ))}\r\n                </StyledSelect>\r\n            </>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <MainCurrencySection>\r\n            <StyledForm>\r\n                {selectFromCurrency()}\r\n                {selectToCurrency()}\r\n            </StyledForm>\r\n            {showComparedCurrency()}\r\n        </MainCurrencySection>\r\n    );\r\n};\r\n\r\nexport default injectIntl(CurrencyConverter);\r\n","import { connect } from 'react-redux';\r\nimport {\r\n    fetchCurrency,\r\n    asignTargetCurrency,\r\n    fetchChartData,\r\n    toggleChart\r\n} from '../../Store/Actions/exchangeActions';\r\nimport CurrencyConverter from './CurrencyConverter';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currency: state.exchange\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchCurrency: currencySelected => dispatch(fetchCurrency(currencySelected)),\r\n        asignTargetCurrency: toCurrency => dispatch(asignTargetCurrency(toCurrency)),\r\n        fetchTimeSerie: starDate => dispatch(fetchChartData(starDate)),\r\n        toggleChart: () => dispatch(toggleChart())\r\n    };\r\n};\r\n\r\nconst CurrencyConverterContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CurrencyConverter);\r\n\r\nexport default CurrencyConverterContainer;\r\n","import styled from 'styled-components';\r\nimport {\r\n    MEDIA_QUERIES_TABLET,\r\n    WHITE_GRAY_COLOR,\r\n    BLACK_COLOR,\r\n    WHITE_COLOR\r\n} from '../../constants';\r\n\r\nexport const StyledCard = styled.section`\r\n    display: flex;\r\n    flex-direction: column;\r\n    border-radius: 5px;\r\n    box-shadow: 5px 3px 5px ${WHITE_GRAY_COLOR};\r\n    border: 1px solid ${BLACK_COLOR};\r\n\r\n    @media only screen and (min-width: ${MEDIA_QUERIES_TABLET}) {\r\n        margin: 60px auto;\r\n        width: 70%;\r\n    }\r\n`;\r\n\r\nexport const StyledChartContainer = styled.article`\r\n    height: 0px;\r\n    margin: 0 auto;\r\n    visibility: hidden;\r\n    opacity: 0;\r\n    width: 0px;\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: ${WHITE_COLOR};\r\n    transition: all 0.5s ease-in-out;\r\n\r\n    &.chart-displayed {\r\n        height: 70%;\r\n        padding: 20px;\r\n        opacity: initial;\r\n        visibility: initial;\r\n        width: 100%;\r\n\r\n        @media only screen and (min-width: ${MEDIA_QUERIES_TABLET}) {\r\n            height: 500px;\r\n            width: 60%;\r\n        }\r\n    }\r\n`;\r\n","import React from 'react';\r\nimport ChartContainer from '../Chart/ChartContainer';\r\nimport CurrencyConverterContainer from '../CurrencyConverter/CurrencyConverterContainer';\r\nimport { StyledCard, StyledChartContainer } from './CardStyle';\r\n\r\nconst Card = props => {\r\n    const { showChart } = props;\r\n    return (\r\n        <StyledCard>\r\n            <CurrencyConverterContainer />\r\n            <StyledChartContainer className={showChart ? 'chart-displayed' : ''}>\r\n                {showChart ? <ChartContainer /> : <></>}\r\n            </StyledChartContainer>\r\n        </StyledCard>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import { connect } from 'react-redux';\r\nimport Card from './Card';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        showChart: state.exchange.showChart\r\n    };\r\n};\r\n\r\nconst CardContainer = connect(mapStateToProps)(Card);\r\n\r\nexport default CardContainer;\r\n","import React from 'react';\r\nimport CardContainer from '../Card/CardContainer';\r\nimport { IntlProvider } from 'react-intl';\r\nimport getCurrentLang from '../../LangProvider/langProvider';\r\n\r\nconst Main = () => {\r\n    const currentBrowserLang = getCurrentLang();\r\n    return (\r\n        <IntlProvider\r\n            defaultLocale='en'\r\n            locale={currentBrowserLang.locale}\r\n            messages={currentBrowserLang.messages}\r\n            defaultMessages={currentBrowserLang.messages}\r\n        >\r\n            <CardContainer />\r\n        </IntlProvider>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import englishMsg from './lang/en_US.json';\r\nimport spanishMsg from './lang/es_ES.json';\r\n\r\nexport default function getCurrentLang() {\r\n    const userLanguage =\r\n        (navigator.languages && navigator.languages[0]) ||\r\n        navigator.language ||\r\n        navigator.userLanguage;\r\n    if (userLanguage === 'es_ES') {\r\n        return {\r\n            locale: 'es_ES',\r\n            messages: {\r\n                ...spanishMsg\r\n            }\r\n        };\r\n    }\r\n    return {\r\n        locale: 'en-US',\r\n        messages: {\r\n            ...englishMsg\r\n        }\r\n    };\r\n}\r\n","import Main from './Components/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n    GET_CURRENCY,\r\n    PENDING_CURRENCY,\r\n    SET_TARGET_CURRENCY,\r\n    TOGGLE_CHART\r\n} from '../Actions/actionTypes';\r\nimport { DEFAULT_CURRENCY_VALUE } from '../../constants';\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    base: DEFAULT_CURRENCY_VALUE,\r\n    date: 0,\r\n    rates: [],\r\n    toCurrency: '',\r\n    showChart: false\r\n};\r\n\r\nconst currencyInfo = (state, payload) => {\r\n    const { base, date, rates } = payload;\r\n    return { ...state, ...{ base, date, rates, isLoading: false } };\r\n};\r\n\r\nexport default function exchangeReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case PENDING_CURRENCY:\r\n            return { ...state, isLoading: true };\r\n        case SET_TARGET_CURRENCY:\r\n            return { ...state, toCurrency: action.targetCurrency };\r\n        case GET_CURRENCY:\r\n            return currencyInfo(state, action.exchange.payload);\r\n        case TOGGLE_CHART:\r\n            return { ...state, showChart: !state.showChart };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {\r\n    PENDING_TIMESERIES,\r\n    GET_TIMESERIES,\r\n    SET_DATE_TIMESERIES\r\n} from '../Actions/actionTypes';\r\nimport { DEFAULT_STARTING_DATE, DEFAULT_CURRENCY_VALUE } from '../../constants';\r\n\r\nexport const initialState = {\r\n    isLoading: false,\r\n    base: DEFAULT_CURRENCY_VALUE,\r\n    timeSeries: [],\r\n    startingDate: DEFAULT_STARTING_DATE\r\n};\r\n\r\nconst timeSerieNormalization = (state, action) => {\r\n    const { timeSeries } = action;\r\n    const { rates } = timeSeries.payload;\r\n    let timeSerieRates = [];\r\n    Object.entries(rates).forEach(([key, value]) =>\r\n        timeSerieRates.push({ x: new Date(key), y: Object.values(value)[0] })\r\n    );\r\n    return { ...state, timeSeries: timeSerieRates, isLoading: false };\r\n};\r\n\r\nexport default function currencyChartReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case PENDING_TIMESERIES:\r\n            return { ...state, isLoading: true };\r\n        case GET_TIMESERIES:\r\n            return timeSerieNormalization(state, action);\r\n        case SET_DATE_TIMESERIES:\r\n            return { ...state, startingDate: action.startTime };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport exchangeReducer from './exchangeReducers';\r\nimport currencyChartReducer from './currencyChartReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    exchange: exchangeReducer,\r\n    chartData: currencyChartReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import axios from 'axios';\r\nimport { all, call, put, takeLatest, select } from 'redux-saga/effects';\r\nimport { DEFAULT_CURRENCY_VALUE, DEFAULT_TARGET_VALUE } from '../../constants';\r\n\r\nimport {\r\n    getCurrencyData,\r\n    pendingCurrency,\r\n    pendingChartData,\r\n    getTimeSeries\r\n} from '../Actions/exchangeActions';\r\nimport { FETCH_CURRENCY, FETCH_TIMESERIES } from '../Actions/actionTypes';\r\n\r\nconst getCurrency = (currencySelected = DEFAULT_CURRENCY_VALUE) =>\r\n    axios.get('https://api.exchangerate.host/latest', {\r\n        params: { base: currencySelected }\r\n    });\r\n\r\nconst getChartData = (\r\n    fromDate,\r\n    toDate,\r\n    currencySelected,\r\n    currencyTarget = DEFAULT_TARGET_VALUE\r\n) =>\r\n    axios.get('https://api.exchangerate.host/timeseries', {\r\n        params: {\r\n            base: currencySelected,\r\n            symbols: currencyTarget,\r\n            start_date: fromDate,\r\n            end_date: toDate\r\n        }\r\n    });\r\n\r\nconst showChart = state => state.exchange.showChart;\r\n\r\nfunction* fetchExchangeData(action) {\r\n    try {\r\n        const { currencySelected } = action;\r\n        yield put(pendingCurrency());\r\n        const response = yield call(() => getCurrency(currencySelected));\r\n        yield put(\r\n            getCurrencyData({\r\n                payload: response.data\r\n            })\r\n        );\r\n        const isChartVisible = yield select(showChart);\r\n        if (isChartVisible) yield put({ type: FETCH_TIMESERIES });\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nconst handleEndDate = () => {\r\n    let todayDate = new Date();\r\n    return todayDate.toJSON().slice(0, 10);\r\n};\r\n\r\nconst getStartingDate = state => state.chartData.startingDate;\r\nconst getToCurrency = state => state.exchange.toCurrency;\r\nconst getFromCurrency = state => state.exchange.base;\r\n\r\nfunction* fetchChartData(action) {\r\n    try {\r\n        const { starDate } = action;\r\n        yield put(pendingChartData());\r\n        const toCurrency = yield select(getToCurrency);\r\n        const currencySelected = yield select(getFromCurrency);\r\n        const storeStartingDate = yield select(getStartingDate);\r\n        const response = yield call(() =>\r\n            getChartData(\r\n                starDate || storeStartingDate,\r\n                handleEndDate(),\r\n                currencySelected,\r\n                toCurrency\r\n            )\r\n        );\r\n        yield put(\r\n            getTimeSeries({\r\n                payload: response.data\r\n            })\r\n        );\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nfunction* mergerSaga() {\r\n    yield all([\r\n        takeLatest(FETCH_CURRENCY, fetchExchangeData),\r\n        takeLatest(FETCH_TIMESERIES, fetchChartData)\r\n    ]);\r\n}\r\n\r\nexport default mergerSaga;\r\n","import { all, fork } from 'redux-saga/effects';\r\n\r\nimport mergerSaga from './exchangeSaga';\r\n\r\nexport function* rootSaga() {\r\n    yield all([fork(mergerSaga)]);\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootReducer from './Reducers/rootReducer';\r\nimport { rootSaga } from './Sagas/rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst composeEnhancers =\r\n    (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\r\n    compose;\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(sagaMiddleware))\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from \"react-redux\";\nimport store from \"./Store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}